[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.14.1","content-config-digest","36655df380194386","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://amase.cc\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":false,\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[\"rehype-slug\",[\"rehype-toc\",{\"headings\":[\"h2\",\"h3\"]}],[null,{}]],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"staticImportMetaEnv\":false,\"chromeDevtoolsWorkspace\":false,\"failOnPrerenderConflict\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12,25,26,36,37,48,49,63,64,76,77,88,89,101,102,113,114,130,131,143,144],"en/why-dont-recommend-implement-activitypub",{"id":11,"data":13,"body":21,"filePath":22,"digest":23,"legacyId":24,"deferredRender":20},{"createdAt":14,"title":15,"description":16,"tags":17,"license":19,"noAi":20},["Date","2025-11-01T00:00:00.000Z"],"Why don't recommend to Implement ActivityPub","自作CMSをやめてDecap CMSを使ってみた。",[18],"activitypub","All Rights Reserved",true,"a","src/content/blog/en/why-dont-recommend-implement-activitypub.mdx","35735a184caf3164","en/why-dont-recommend-implement-activitypub.mdx","ja/1755531106734-sharkey",{"id":25,"data":27,"body":32,"filePath":33,"digest":34,"legacyId":35,"deferredRender":20},{"createdAt":28,"title":29,"description":30,"tags":31,"license":19,"noAi":20},["Date","2025-08-18T00:00:00.000Z"],"SharkeyやMisskeyをFedora 42にインストールするときに発生する問題に対処する","FreeBSDで起動できるように修正されたMisskeyおよびSharkeyをFedora 42環境にインストールする際、以下のエラーが発生することがあります。",[],"これは[Hacker's Pubから](https://hackers.pub/@cocoa/2025/how-to-install-sharkey-misskey-with-fixes-for-freebsd-for-fedora-42/ja)の本人による~~無断~~転載です\r\n\r\nFreeBSDで起動できるように修正されたMisskeyおよびSharkey（変更がすでに適用済み）をFedora 42環境にインストールする際、以下のエラーが発生することがあります。\r\n\r\n```\r\nerror: ‘uint8_t’ was not declared in this scope\r\nerror: ‘state’ was not declared in this scope\r\n```\r\n\r\nこれらの問題は、使用しているGCCのバージョンに起因しているようです（[参照](https://github.com/misskey-dev/misskey/issues/16098#issuecomment-2910448414)）。以下に、Fedora 42でこれらの問題を解決する方法を示します。\r\n\r\n## ステップ1: 依存関係のインストール\r\n\r\nまず、[Wiki](https://github.com/Automattic/node-canvas/wiki/Installation:-Fedora-and-other-RPM-based-distributions)に記載されているように、必要な依存関係をインストールします。\r\n\r\n```sh\r\nsudo dnf install cairo-devel libjpeg-turbo-devel pango-devel giflib-devel pixman-devel\r\n```\r\n\r\n## ステップ2: GCC/G++のコンパイル\r\n\r\nFedoraにバンドルされているデフォルトのGCCを使用すると、`pnpm install`を実行した際にインストールが失敗する可能性があります（2025年5月27日現在）。この問題を避けるために、別のGCC/G++のバージョンをコンパイルして使用する必要があります。\r\n\r\nまず、wgetを使用してGCCのソースコードをダウンロードし、解凍した後、ソースディレクトリに移動します。\r\n\r\n```sh\r\nwget https://ftp.tsukuba.wide.ad.jp/software/gcc/releases/gcc-13.3.0/gcc-13.3.0.tar.gz\r\ntar xzf gcc-13.3.0.tar.gz\r\ncd gcc-13.3.0\r\nmkdir build\r\ncd build\r\n```\r\n\r\n次に、GCC/G++をビルドするために必要な依存関係をインストールします。\r\n\r\n```sh\r\nsudo dnf group install development-tools\r\nsudo dnf install mpfr-devel gmp-devel libmpc-devel zlib-devel glibc-devel.i686 glibc-devel isl-devel libgphobos-static\r\n```\r\n\r\n次に、ビルドを設定します（フラグは必要に応じて変更してください）。\r\n\r\n```sh\r\n../configure --disable-bootstrap --prefix=/usr --program-suffix=-13.3 --mandir=/usr/share/man --enable-languages=c,c++\r\n```\r\n\r\n設定が完了したら、以下のコマンドでGCCをコンパイルします。\r\n\r\n```sh\r\nmake\r\n```\r\n\r\nより速いビルドのために複数のコアを利用するには、`-j`フラグを使用します。\r\n\r\n```sh\r\nmake -j6\r\n```\r\n\r\nコンパイルが完了したら、新しいGCCバージョンをインストールします。\r\n\r\n```sh\r\nsudo make install\r\n```\r\n\r\nコンパイルしたGCCのインストールを確認するには、以下のコマンドを使用します。\r\n\r\n```sh\r\ngcc-13.3 -v\r\n```\r\n\r\n## ステップ3: Misskey/Sharkeyのインストールコマンドを修正\r\n\r\n最後に、SharkeyとMisskeyを正常にインストールするために、インストールコマンドを以下のように修正します。\r\n\r\n```sh\r\nCXX=/usr/sbin/g++-13.3 CC=/usr/sbin/gcc-13.3 pnpm install --frozen-lockfile\r\n```\r\n\r\nこれらの調整を行うことで、MisskeyとSharkeyを問題なくインストールできるはずです。Fediverseを楽しんでください！\r\n\r\n*テキストを自然にするためにLLMをある程度使用しました。投稿前に確認しましたが、不自然な部分があればお知らせください。\r\n\r\n## 参考文献\r\n- [Fedora 41/40でGCC 14を使用してGCC 13.3をビルドする方法](https://www.if-not-true-then-false.com/2023/fedora-build-gcc/#9-check-gcc-13-installation)","src/content/blog/ja/1755531106734-Sharkey.mdx","a98d18326b466732","ja/1755531106734-Sharkey.mdx","ja/1755638884469-勝手にfepの日本語訳をしている話",{"id":36,"data":38,"body":44,"filePath":45,"digest":46,"legacyId":47,"deferredRender":20},{"createdAt":39,"title":40,"description":41,"tags":42,"license":19,"noAi":20},["Date","2025-08-19T00:00:00.000Z"],"勝手にFEPの日本語訳をしている話","最近、英語の練習という名目でFEPの翻訳をしています。",[43],"fediverse","最近、英語の練習という名目でFEPの翻訳をしています。\r\n\r\n## なぜやり始めたのか\r\nFEPは英語で書かれています。機械翻訳することである程度読めるようにはなるものの、インラインコードが混じるとそれだけで文章の順序が変になって結局は読みにくくなってしまいます。それくらいならFEPを直接翻訳して日本語で読めるようにすればいい、そう思って書き始めました。\r\n\r\n## 方法\r\n主にLLM (Gemini)と手動を組み合わせています\r\n\r\nただLLMが優秀なので今のところは手動で手を加えたりはしてないです\r\n\r\n昔は機械翻訳 + 手動修正でした (スクリプトを組んでなかったので死ぬほど手間がかかりました)\r\n\r\n翻訳されるFEPに関しては、どのFEPが比較的参照されるかなどを勝手に考えてそのFEPのIDをconfigに書き込んで、1日に何個みたいに手作業でスクリプトを動かしてLLMに通してます (というよりは自分が使うFEPから先に翻訳しています)\r\n\r\n## 他の言語\r\n一応、別の言語の翻訳版も作れるはずです。試していないのでわかりませんが。","src/content/blog/ja/1755638884469-勝手にFEPの日本語訳をしている話.mdx","c3ae7854c71688cd","ja/1755638884469-勝手にFEPの日本語訳をしている話.mdx","ja/1755806437530-僕がactivitypubを始めた理由",{"id":48,"data":50,"body":59,"filePath":60,"digest":61,"legacyId":62,"deferredRender":20},{"createdAt":51,"title":52,"description":53,"tags":54,"license":19,"noAi":20},["Date","2025-08-21T00:00:00.000Z"],"僕がActivityPubを始めた理由","ActivityPubを知った経緯やapkit/Kaguraなどの話を。",[18,43,55,56,57,58],"apkit","apsig","apmodel","apfetch","import Link from '../../../shortcodes/Link.astro';\r\n\r\n殆どapkitの話です。ごめんね\r\n\r\n\r\n## なぜActivityPubに惹かれたのか？\r\n\r\n### Misskeyとの出会い\r\n僕が分散型SNSに興味を持ったのは、SNSで見かけた**Misskey.io**がきっかけでした。MisskeyにはAPIが公開されていたので、一時期はそれを使ってBotを開発していました。しかし、ネットワークの不安定さや、コードの管理ミスによる**ソースコードの消失**といった問題に直面し、Bot開発からは距離を置くようになりました。\r\n\r\nそんな中、Misskeyが採用している**ActivityPub**という技術に強く惹かれ、その仕組みを本格的に調べるようになりました。\r\n\r\n### ActivityPub実装への第一歩\r\n「[Mastodonにアカウントとして認識されるActivityPubを実装してみる](https://qiita.com/wakin/items/94a0ff3f32f842b18a25)」というQiitaの記事を見つけたことが、自分でActivityPubを実装してみる大きなきっかけになりました。今思い返すと、この記事がなければこの挑戦は始まらなかったかもしれません。\r\n\r\n#### 過去の挑戦：Hol0とGrapheneの挫折\r\n実は、過去に**Hol0 (Graphene)**というActivityPub実装を自作しようと試みたことがあります。しかし、今から1年ほど前の当時はActivityPubについての知識がまだ未熟で、特に「署名」の実装でつまずき、プロジェクトを完成させることはできず、そのままフェードアウトしました。\r\n\r\n## 現在のプロジェクト：Kaguraとライブラリ開発\r\n\r\n過去の失敗を乗り越え、現在は**Kagura**というActivityPub実装を作成しています。このプロジェクトのために、いくつかのライブラリを開発しました。\r\n\r\n### 開発の経緯\r\nこれらのライブラリは、当時のPythonにおけるActivityPub関連ライブラリの課題から生まれました。実用的なライブラリがほとんどなく、存在してもGPLやAGPLといった、比較的寛容ではないライセンスのものが多かったのです。\r\n\r\n1.  **apsig**\r\n    Kaguraで利用することを目的として、スタンドアロンの署名ライブラリである**apsig**を最初に開発しました。これは、Kagura以外でも手軽に署名を実装できるようにしたいという思いから生まれたものです。\r\n\r\n2.  **apkit**\r\n    次に、JavaScriptのActivityPubフレームワークである**Fedify**や、Python向けのFediverseユーティリティである**bovine**に大きな影響を受け、PythonにもFedifyのようなライブラリを作りたいという衝動から、**apkit**の開発を始めました。\r\n\r\n3.  **apmodel**\r\n    apkitの開発を進める中で、Activity Streams 2.0のパーサーに実用的なものがほとんどないことに気づきました。僕の性格上、既存のライブラリを修正するよりも、ゼロから新しく作成する方が効率的だと判断し、**apmodel**を開発しました。これが、現在のapkitの基盤の一つとなっています。\r\n\r\n### apkitの思想と設計\r\napkitは、「ActivityPubの実装を、誰でも簡単に、シンプルかつ直感的に書けるようにすること」を最も重要な思想としています。\r\n\r\n#### 1. 独立性と選択肢\r\napkitは、それ自体がなくてもActivityPub実装が可能なように設計されています。**apsig**や**apmodel**といった中核ライブラリはそれぞれ独立して利用できるため、apkitはこれらのライブラリを統合することで、より便利で効率的な開発体験を提供することを目指しています。開発者は、必要な機能だけを組み込むことも、apkit全体を利用して迅速に開発を進めることも自由に選択できます。\r\n\r\n#### 2. 簡潔性\r\napkitのコードは、デコレータや型ヒントを積極的に採用することで、冗長な記述を避け、シンプルで読みやすいコードを実現しています。これにより、開発者はActivityPubの複雑な仕様に悩まされることなく、アプリケーションのロジックに集中できます。\r\n\r\n### apkitのこれから\r\napkitはまだ未完成です。今後の主要な取り組みは以下の通りです。\r\n\r\n* **全面的な書き直し:** **apmodel**は特に実装が乱雑であり、**apkit**と**apmodel**は全体的にコードを見直して書き直す予定です。\r\n* **テストの拡充:** 現在、**apsig**のみにテストを実装していますが、今後は**apkit**や**apmodel**でもテストを拡充し、堅牢性を高めます。\r\n* **同期サポートの強化:** **apkit**の非同期処理部分を分離し、同期処理のサポートも強化していく予定です。ただし、非同期処理のサポートは依然として継続し、同期処理のサポートはFlask等の非同期では無いフレームワーク向けに提供されます。\r\n* **モジュールの分離:** **apkit**のActivityPubクライアントなど、主要なモジュールを分離し、独立して扱えるようにします。\r\n\r\nこれらの取り組みを通じて、apkitをより使いやすく、強力なツールへと進化させていきます。\r\n\r\n## Links\r\n\u003CLink url=\"https://github.com/fedify-dev/fedify\" />\r\n\u003Cbr />\r\n\u003CLink url=\"https://codeberg.org/bovine/bovine\" />\r\n\r\n\u003CLink url=\"https://github.com/fedi-libs/apsig\" />\r\n\u003Cbr />\r\n\u003CLink url=\"https://github.com/fedi-libs/apkit\" />\r\n\u003Cbr />\r\n\u003CLink url=\"https://github.com/fedi-libs/apmodel\" />\r\n\r\n---\r\n\r\nこの記事は人間によって執筆され、`Gemini 2.5 Flash`による修正を含みます。","src/content/blog/ja/1755806437530-僕がActivityPubを始めた理由.mdx","c3aebe82c55f8d99","ja/1755806437530-僕がActivityPubを始めた理由.mdx","ja/diy-media-proxy",{"id":63,"data":65,"body":72,"filePath":73,"digest":74,"legacyId":75,"deferredRender":20},{"createdAt":66,"title":67,"description":68,"tags":69,"license":19,"noAi":20},["Date","2024-08-28T00:00:00.000Z"],"MisskeyのMedia Proxyを自作した","Media-Proxyを作成したのでそのコードについて説明したりするだけ",[70,71],"Misskey","Python","[Media-Proxy](https://github.com/AmaseCocoa/media-proxy)を作成したのでそのコードについて説明したりするだけ。\r\n\r\n※これは古いバージョンのコードです。Pillowを使っているので大きな画像は処理できません\r\n```python\r\nimport os\r\nimport logging\r\nimport traceback\r\n\r\nimport aiofiles\r\nimport aiohttp\r\nimport aiohttp.web as web\r\nfrom aiohttp_cache import (\r\n    setup_cache,\r\n    cache,\r\n)\r\nfrom PIL import Image\r\nimport io\r\nimport urllib.parse\r\n\r\nlogger = logging.getLogger(__name__)\r\n\r\n\r\nasync def fetch_image(session: aiohttp.ClientSession, url):\r\n    async with session.get(url) as response:\r\n        if not response.ok:\r\n            return None\r\n        else:\r\n            content_type = response.headers.get(\"Content-Type\", \"\").lower()\r\n            data = bytearray()\r\n            while True:\r\n                chunk = await response.content.read(int(os.environ.get(\"CHUNK_SIZE\", 1048576)))\r\n                if not chunk:\r\n                    break\r\n                data.extend(chunk)\r\n            return data, content_type\r\n\r\n\r\n@cache(expires=os.environ.get(\"EXPIRES\", 86400) * 1000)\r\nasync def proxy_image(request):\r\n    query_params = request.rel_url.query\r\n    url = query_params.get(\"url\")\r\n    fallback = \"fallback\" in query_params\r\n    emoji = \"emoji\" in query_params\r\n    avatar = \"avatar\" in query_params\r\n    static = \"static\" in query_params\r\n    preview = \"preview\" in query_params\r\n    badge = \"badge\" in query_params\r\n\r\n    try:\r\n        if not url:\r\n            return web.Response(status=400, text=\"Missing 'url' parameter\")\r\n\r\n        try:\r\n            url = urllib.parse.unquote(url)\r\n        except Exception as e:\r\n            return web.Response(status=400, text=\"Invalid 'url' parameter\")\r\n\r\n        async with aiohttp.ClientSession() as session:\r\n            image_data, content_type = await fetch_image(session, url)\r\n\r\n            if image_data is None:\r\n                if fallback:\r\n                    headers = {\r\n                        \"Cache-Control\": \"max-age=300\",\r\n                        \"Content-Type\": \"image/webp\",\r\n                        \"Content-Security-Policy\": \"default-src 'none'; img-src 'self'; media-src 'self'; style-src 'unsafe-inline'\",\r\n                        \"Content-Disposition\": \"inline; filename=image.webp\",\r\n                    }\r\n                    async with aiofiles.open(\"./assets/fallback.webp\", \"rb\") as f:\r\n                        return web.Response(\r\n                            status=200, body=await f.read(), headers=headers\r\n                        )\r\n                return web.Response(status=404, text=\"Image not found\")\r\n            if \"image\" not in content_type:\r\n                logger.info(\"Media is Not Image. Redirecting to Response...\")\r\n                headers = {\r\n                    \"Cache-Control\": \"max-age=31536000, immutable\",\r\n                    \"Content-Type\": content_type,\r\n                    \"Content-Security-Policy\": \"default-src 'none'; img-src 'self'; media-src 'self'; style-src 'unsafe-inline'\",\r\n                    \"Content-Disposition\": \"inline; filename=image.webp\",\r\n                }\r\n                return web.Response(status=200, body=image_data, headers=headers)\r\n\r\n            image = Image.open(io.BytesIO(image_data))\r\n\r\n            if emoji:\r\n                image.thumbnail((128, 128))\r\n            elif avatar:\r\n                image.thumbnail((320, 320))\r\n            elif preview:\r\n                image.thumbnail((200, 200))\r\n            elif badge:\r\n                image = image.convert(\"RGBA\")\r\n                image = image.resize((96, 96))\r\n\r\n            output = io.BytesIO()\r\n            image_format = \"WEBP\" if not badge else \"PNG\"\r\n            if image_format == \"PNG\":\r\n                image.save(output, format=image_format, optimize=True)\r\n            elif image_format == \"WEBP\":\r\n                image.save(output, format=image_format, quality=80)\r\n            output.seek(0)\r\n\r\n            headers = {\r\n                \"Cache-Control\": \"max-age=31536000, immutable\"\r\n                if image_data\r\n                else \"max-age=300\",\r\n                \"Content-Type\": f\"image/{image_format.lower()}\",\r\n                \"Content-Security-Policy\": \"default-src 'none'; img-src 'self'; media-src 'self'; style-src 'unsafe-inline'\",\r\n                \"Content-Disposition\": f\"inline; filename=image.{image_format.lower()}\",\r\n            }\r\n\r\n            return web.Response(body=output.read(), headers=headers)\r\n    except Exception as e:\r\n        print(traceback.format_exc())\r\n        if fallback:\r\n            headers = {\r\n                \"Cache-Control\": \"max-age=300\",\r\n                \"Content-Type\": \"image/webp\",\r\n                \"Content-Security-Policy\": \"default-src 'none'; img-src 'self'; media-src 'self'; style-src 'unsafe-inline'\",\r\n                \"Content-Disposition\": \"inline; filename=image.webp\",\r\n            }\r\n            async with aiofiles.open(\"./assets/fallback.webp\", \"rb\") as f:\r\n                return web.Response(\r\n                    status=200, body=await f.read(), headers=headers\r\n                )\r\n        return web.Response(status=404, text=\"Image not found\")\r\n\r\n\r\napp = web.Application()\r\nsetup_cache(app)\r\napp.router.add_get(\"/proxy/{filename}\", proxy_image)\r\napp.router.add_get(\"/\", proxy_image)\r\napp.router.add_get(\"/{filename}\", proxy_image)\r\n\r\nif __name__ == \"__main__\":\r\n    web.run_app(\r\n        app, port=os.environ.get(\"PORT\", 3003), host=os.environ.get(\"HOST\", \"0.0.0.0\")\r\n    )\r\n```\r\n#### モジュールの読み込み\r\n\r\n```python\r\nimport os\r\nimport logging\r\nimport traceback\r\n\r\nimport aiofiles\r\nimport aiohttp\r\nimport aiohttp.web as web\r\nfrom aiohttp_cache import (\r\n    setup_cache,\r\n    cache,\r\n)\r\nfrom PIL import Image\r\nimport io\r\nimport urllib.parse\r\n```\r\n\r\n- `aiohttp`と`aiohttp.web`：HTTPクライアントとサーバー。\r\n- `aiofiles`：個人的にwith openだと気になるので。使う必要はあまりないかも。\r\n- `PIL`（Pillow）：画像処理ライブラリ。圧縮などに利用します\r\n- `urllib.parse`：URLのパースとエンコード/デコード用\r\n- `aiohttp_cache`：キャッシュ\r\n\r\n#### 2. ログの設定\r\n\r\n```python\r\nlogger = logging.getLogger(__name__)\r\n```\r\n\r\n#### 3. 画像の取得\r\n\r\n```python\r\nasync def fetch_image(session: aiohttp.ClientSession, url):\r\n    async with session.get(url) as response:\r\n        if not response.ok:\r\n            return None\r\n        else:\r\n            content_type = response.headers.get(\"Content-Type\", \"\").lower()\r\n            data = bytearray()\r\n            while True:\r\n                chunk = await response.content.read(int(os.environ.get(\"CHUNK_SIZE\", 1048576)))\r\n                if not chunk:\r\n                    break\r\n                data.extend(chunk)\r\n            return data, content_type\r\n```\r\n\r\n指定されたURLから画像を非同期で取得し、バイトデータとコンテンツタイプを返す。一気に取得するのではなく (一気に取得してしまうと大きなファイルでは遅くなるので)1MBづつチャンクで取得するようになっています。\r\n\r\n#### 4. ルート部分\r\n\r\n```python\r\n@cache(expires=os.environ.get(\"EXPIRES\", 86400) * 1000)\r\nasync def proxy_image(request):\r\n    query_params = request.rel_url.query\r\n    url = query_params.get(\"url\")\r\n    fallback = \"fallback\" in query_params\r\n    emoji = \"emoji\" in query_params\r\n    avatar = \"avatar\" in query_params\r\n    static = \"static\" in query_params\r\n    preview = \"preview\" in query_params\r\n    badge = \"badge\" in query_params\r\n\r\n    try:\r\n        if not url:\r\n            return web.Response(status=400, text=\"Missing 'url' parameter\")\r\n\r\n        try:\r\n            url = urllib.parse.unquote(url)\r\n        except Exception as e:\r\n            return web.Response(status=400, text=\"Invalid 'url' parameter\")\r\n\r\n        async with aiohttp.ClientSession() as session:\r\n            image_data, content_type = await fetch_image(session, url)\r\n\r\n            if image_data is None:\r\n                if fallback:\r\n                    headers = {\r\n                        \"Cache-Control\": \"max-age=300\",\r\n                        \"Content-Type\": \"image/webp\",\r\n                        \"Content-Security-Policy\": \"default-src 'none'; img-src 'self'; media-src 'self'; style-src 'unsafe-inline'\",\r\n                        \"Content-Disposition\": \"inline; filename=image.webp\",\r\n                    }\r\n                    async with aiofiles.open(\"./assets/fallback.webp\", \"rb\") as f:\r\n                        return web.Response(\r\n                            status=200, body=await f.read(), headers=headers\r\n                        )\r\n                return web.Response(status=404, text=\"Image not found\")\r\n            if \"image\" not in content_type:\r\n                logger.info(\"Media is Not Image. Redirecting to Response...\")\r\n                headers = {\r\n                    \"Cache-Control\": \"max-age=31536000, immutable\",\r\n                    \"Content-Type\": content_type,\r\n                    \"Content-Security-Policy\": \"default-src 'none'; img-src 'self'; media-src 'self'; style-src 'unsafe-inline'\",\r\n                    \"Content-Disposition\": \"inline; filename=image.webp\",\r\n                }\r\n                return web.Response(status=200, body=image_data, headers=headers)\r\n\r\n            image = Image.open(io.BytesIO(image_data))\r\n\r\n            if emoji:\r\n                image.thumbnail((128, 128))\r\n            elif avatar:\r\n                image.thumbnail((320, 320))\r\n            elif preview:\r\n                image.thumbnail((200, 200))\r\n            elif badge:\r\n                image = image.convert(\"RGBA\")\r\n                image = image.resize((96, 96))\r\n\r\n            output = io.BytesIO()\r\n            image_format = \"WEBP\" if not badge else \"PNG\"\r\n            if image_format == \"PNG\":\r\n                image.save(output, format=image_format, optimize=True)\r\n            elif image_format == \"WEBP\":\r\n                image.save(output, format=image_format, quality=80)\r\n            output.seek(0)\r\n\r\n            headers = {\r\n                \"Cache-Control\": \"max-age=31536000, immutable\"\r\n                if image_data\r\n                else \"max-age=300\",\r\n                \"Content-Type\": f\"image/{image_format.lower()}\",\r\n                \"Content-Security-Policy\": \"default-src 'none'; img-src 'self'; media-src 'self'; style-src 'unsafe-inline'\",\r\n                \"Content-Disposition\": f\"inline; filename=image.{image_format.lower()}\",\r\n            }\r\n\r\n            return web.Response(body=output.read(), headers=headers)\r\n    except Exception as e:\r\n        print(traceback.format_exc())\r\n        if fallback:\r\n            headers = {\r\n                \"Cache-Control\": \"max-age=300\",\r\n                \"Content-Type\": \"image/webp\",\r\n                \"Content-Security-Policy\": \"default-src 'none'; img-src 'self'; media-src 'self'; style-src 'unsafe-inline'\",\r\n                \"Content-Disposition\": \"inline; filename=image.webp\",\r\n            }\r\n            async with aiofiles.open(\"./assets/fallback.webp\", \"rb\") as f:\r\n                return web.Response(\r\n                    status=200, body=await f.read(), headers=headers\r\n                )\r\n        return web.Response(status=404, text=\"Image not found\")\r\n```\r\n\r\nクエリパラメータを取得し、画像のURLを取得。\r\n\r\n画像が見つからない場合やエラーが発生した場合の処理。\r\n\r\n画像の種類に応じてサムネイルなどの処理を行い、適切なヘッダーを設定してレスポンスを返す。\r\n\r\n#### 5. サーバーの設定\r\n\r\n```python\r\napp = web.Application()\r\nsetup_cache(app)\r\napp.router.add_get(\"/proxy/{filename}\", proxy_image)\r\napp.router.add_get(\"/\", proxy_image)\r\napp.router.add_get(\"/{filename}\", proxy_image)\r\n\r\nif __name__ == \"__main__\":\r\n    web.run_app(\r\n        app, port=os.environ.get(\"PORT\", 3003), host=os.environ.get(\"HOST\", \"0.0.0.0\")\r\n    )\r\n```\r\n\r\n`aiohttp`を使ってWebアプリケーションを設定。\r\n\r\nキャッシュの設定。\r\n\r\n`/proxy/{filename}`、`/`、`/{filename}`のルートに`proxy_image`ハンドラを設定。\r\n\r\nアプリケーションを指定されたホストとポートで実行。ここは環境変数で変更できます。\r\n\r\n~~ちなみに本当はintに変換しないといけないのにこのときのぼくは忘れていました~~","src/content/blog/ja/diy-media-proxy.mdx","0a85e4e5649f4987","ja/diy-media-proxy.mdx","ja/jisaku-cms",{"id":76,"data":78,"body":84,"filePath":85,"digest":86,"legacyId":87,"deferredRender":20},{"createdAt":79,"title":80,"description":81,"tags":82,"license":19,"noAi":20},["Date","2024-08-20T00:00:00.000Z"],"何を狂ったのかCMSを一から作った話","何故かCMSからブログを作ってしまいました。",[83],"自作CMS","何故かCMSからブログを作ってしまいました。\r\n\r\n## どうして？\r\nなんとなく興味があったから。\r\n![管理画面](https://i.imgur.com/iuUKckJ.jpeg)\r\n*管理画面とされているページ*\r\n## 使ってる技術\r\n### バックエンド\r\n* FastAPI\r\n* uvicorn\r\n* Python-Markdown (を少し拡張してます)\r\n* PostgreSQL (CockroachDB)\r\n* ちなみにスキーマいじればどのDBでも使えると思います\r\n* Prisma側の検索機能も対応したいならPostgresかMySQLしか駄目かも\r\n* Prisma\r\n#### フロントエンド\r\n* Bootstrap\r\n* EasyMDE (WYSIWYGエディター)\r\n#### サービス\r\n* Render (PaaS)\r\n* CockroachDB Cloud\r\n## amsc.pages.devから変わった点\r\n* 静的サイトではなくなった\r\n* サーバー側でレンダリングしたページを返す形式になった\r\n* Twemojiが使えるようになった\r\n* ただし絵文字を直接変換することはできなくて絵文字のコード (:thumbsup:なら`:thumbsup:`)を打つ必要がある\r\n* 将来的には絵文字を直接変換できるようにするか絵文字ピッカーを実装したい\r\n* 動的にcssやjsを圧縮できるようになった\r\n* 管理画面ができた\r\n* 投稿が簡単に編集できるようになった\r\n* 削除も同じく\r\n* 閲覧数がカウントされるようになった\r\n* 精度が低いので見れないようになってるけど一応カウントされてます\r\n* 検索機能が実装された ← NEW!!!\r\n## やりたいこと\r\n* 画像自体をエディターから上げられるようにしたい\r\n* 現状はできない\r\n* 実現するならS3とかR2みたいなのを使う必要がある気がする\r\n* MFMを描画できるようにしたい\r\n## あとがき\r\n結構速さは重視してたりします\r\nお陰で評価は結構高いです\r\n![PageSpeed Insights](https://lh3.googleusercontent.com/pw/AP1GczPodlshE4DdbiFSj94RhrdRBAGtI7Eu3M-uq_ml4LJoH3P8YE8RLAGQfwY0zYKo_arXrXm4xNQ4hv5OjHGAP0pCAqWShRYPMme-PF6x3J32fuKL3o1NpDxZTRo25tGHhcVrdTYRZnFo_Xbk9pXBcp_H=w1899-h916-s-no-gm?authuser=0)\r\n*モバイル*\r\n![PageSpeed Insights](https://lh3.googleusercontent.com/pw/AP1GczNYamuj-IQ0hPuWjs-u8YLQaYVdhQZSVDe7HBaEZJicNzII4NyduO_8n2AOpy9_ctYg6poBeK6GnJkkzkY56w4zCgYsLXZEc-DttmKL3alE0hB81RK1bBCys8_1LkkNv4d2fg1ONwc0SCTbWhtzfbHw=w1139-h524-s-no-gm?authuser=0)\r\n*デスクトップ*\r\n![](https://lh3.googleusercontent.com/pw/AP1GczOjZroI7oVb4Q6yQQVE0sNEXaIfFW_ncvq8hpik-68c50D2ukG6-N4aecumQdXuXFFeJ6WCGlzuzGeh8-HCQdbAT-AUt_xxzFXPl1yByd3jshuxuMv6uov9F4CjLl3F3ICQw5Rzq5wG4q6J9OJDTskZ=w1901-h911-s-no-gm?authuser=0)\r\n*記事ページはモバイルだと微妙かも*\r\n![](https://lh3.googleusercontent.com/pw/AP1GczOv1vFto-ky9Q6tg3NSZ7NiKFdYXlc0OHq7s27QSg68R_EWigM-2Co7igMWBWTd7U2dXCD394n42uyjiFA8ATOt9jr0i_6CR9Mdf_FAVmrNY07jqmcpX2GdipZ_9Ttp6ruZhpxDnIL5jQnjaF3LEKsI=w1046-h505-s-no-gm?authuser=0)\r\n*記事ページでもデストップだといい感じ*","src/content/blog/ja/jisaku-cms.mdx","ab1312478b909f9c","ja/jisaku-cms.mdx","ja/meilisearch-japanese-build",{"id":88,"data":90,"body":97,"filePath":98,"digest":99,"legacyId":100,"deferredRender":20},{"createdAt":91,"title":92,"description":93,"tags":94,"license":19,"noAi":20},["Date","2024-08-29T00:00:00.000Z"],"MisskeyでMeilisearchを利用する際の日本語検索の精度を向上させる","体感ではそんな印象はないけど気になるので入れ替えてみる。",[95,96],"misskey","meilisearch","import Link from '../../../shortcodes/Link.astro';\r\nimport GitHub from '../../../shortcodes/GitHub.astro';\r\n\r\n体感ではそんな印象はないけど気になるので入れ替えてみる。\r\n### Docker\r\nアップデート手順はほとんど参考記事のものです。\r\n\r\nコンテナを停止する。\r\n```bash {linenos=true}\r\n$ docker compose down\r\n```\r\n\r\ndumpを作成する。\r\n```bash\r\n$ curl  -X POST 'http://meilisearchのFQDN/dumps' -H 'Authorization: Bearer (MEILI_MASTER_KEYに設定した値)'\r\n```\r\n以下を実行してstatusがsucceededになったらok。\r\n```bash\r\n$ curl -X POST 'http://meilisearchのFQDN/tasks/(dumpsの返り値のtaskUid)' -H 'Authorization: Bearer (MEILI_MASTER_KEYに設定した値)'\r\n```\r\n`(composeに設定したmeilisearchのディレクトリ)/dumps`にdumpファイルが生成されているはず。\r\n\r\n(念の為) 先に`(composeに設定したmeilisearchのディレクトリ)/data.ms`を別の場所にコピーしておく。\r\n\r\nMeilisearchのdocker imageをMeilisearch 1.3.0系の\r\n```yaml\r\nimage: getmeili/meilisearch:prototype-japanese-4\r\n```\r\nに置き換える。\r\n\r\n次にこのコマンドを実行してdumpを取り込む\r\n```bash\r\n$ docker run -it --rm -p 7700:7700 -v /meili_data:/meili_data getmeili/meilisearch:prototype-japanese-4 meilisearch --import-dump /meili_data/dumps/(dumpの名前)\r\n```\r\n\r\n最後にコンテナを起動して完了。\r\n```bash\r\n$ docker compose up -d\r\n```\r\n\r\n#### 参考\r\n- [Meilisearchのバージョンアップ手順(Docker版)](https://qiita.com/inunekousapon/items/0c7210c44c2b023b50d3)\r\n- https://github.com/meilisearch/meilisearch/pull/3882\r\n### 非Docker\r\n> 自動でビルドされたバイナリをリリースに投げるようにしました。ビルドが面倒だったりリソースが不足したりする人はここからダウンロードすることもできます。\r\n> \u003CGitHub repo=\"AmaseCocoa/Meilisearch-JPNBuild\" />\r\n\r\n#### ビルドする場合\r\nDockerを使っていない場合は少し手順が複雑になる。\r\n\r\nGitとRustがインストールされていない場合はインストールする。\r\n\r\nMeilisearchのリポジトリをクローン、ディレクトリを移動する。\r\n```bash\r\n$ git clone https://github.com/meilisearch/meilisearch\r\n$ cd meilisearch\r\n```\r\nv1.3.4をチェックアウトする\r\n```bash\r\n$ git checkout v1.3.4\r\n```\r\n最後にrustをアップデートして、中国語のトークン化を無効にしたバージョンのMeilisearchをビルドする。\r\n```bash\r\n$ rustup update\r\n\r\n$ cargo build --release -p meilisearch -p meilitool --no-default-features --features \"analytics mini-dashboard japanese\"\r\n```\r\n\r\n最後に[ドキュメントの手順](https://www.meilisearch.com/docs/learn/update_and_migration/updating)を実行してMeilisearchを更新すれば完了。\r\n#### 参考\r\n\u003CLink url=\"https://github.com/meilisearch/meilisearch/issues/4561#issuecomment-2058594295\" />\r\n\r\n\u003CLink url=\"https://github.com/meilisearch/meilisearch/pull/3882\" />\r\n### 注意点\r\n中国語のトークン化を無効にして精度を向上させているらしいので(このあたりは詳しくないのでわかりませんが) 多分中国語の精度がめちゃくちゃ落ちます。","src/content/blog/ja/meilisearch-japanese-build.mdx","40fb55518b67ac2c","ja/meilisearch-japanese-build.mdx","ja/misskey-calendar-2024",{"id":101,"data":103,"body":109,"filePath":110,"digest":111,"legacyId":112,"deferredRender":20},{"createdAt":104,"title":105,"description":106,"tags":107,"license":19,"noAi":20},["Date","2024-12-21T00:00:00.000Z"],"Misskeyのいろいろなものを別の言語で再実装してみてる話","media proxyとかsummaly proxyとか",[108],"Tech","import Link from '../../../shortcodes/Link.astro';\r\nimport GitHub from '../../../shortcodes/GitHub.astro';\r\nimport Advantar from '../../../shortcodes/Advantar.astro';\r\n\r\n> この記事は[Misskey Advent Calendar 2024](https://adventar.org/calendars/10208) 21日目の記事です\r\n> \r\n> [← 20日目の記事](https://yumechi.jp/ja/blog/2024/misskey%E3%83%8F%E3%83%BC%E3%83%89%E3%83%8B%E3%83%B3%E3%82%B0/) | [22日目の記事 →](https://note.com/cv_k/n/n42cfe0d67712)\r\n\r\n\u003CAdvantar id=\"10208\" />\r\n\r\n[Media Proxy for Misskey](https://github.com/misskey-dev/media-proxy)や[summaly](https://github.com/misskey-dev/summaly)をいろんな言語で再実装してみてる話です。駄文ですが許してください\r\n\r\nもともとはAPIラッパーの話をしようと思ってたんですが、色々問題が起こりすぎて間に合いそうになかったので変えました\r\n\r\n## 何で作ったのか\r\n~~特に理由はなかったりします~~ ただ作ってみたかったからっていうのが理由です (ちなみにsummaly-pyは初期は[summergo](https://github.com/nexryai/summergo)を無理矢理Pythonで動かすだけのお遊び的な実装でした)\r\n\r\nちなみにsummalyとMedia Proxyだとsummalyの方が実装が面倒でした\r\n\r\nmedia-proxy-goはGoの勉強のために作ってみました (微妙なので使うのはおすすめしません)\r\n## 発生した問題など\r\n### summaly-py\r\n~~最初から殆ど問題はなかったかもしれません~~ 強いて言えばcontent_length_limitがNone (null)な場合にエラーが返ってくるくらいです\r\n### media-proxy\r\nmedia-proxyは初期に使ってたライブラリのPillowだと大きな画像を処理できずにエラーを返してくる問題がありました。 ([#1](https://github.com/AmaseCocoa/media-proxy/issues/1))\r\n\r\n結局本家で使われている[Sharp](https://sharp.pixelplumbing.com/)と同じlibvipsを使う[pyvips](https://github.com/libvips/pyvips)を使うようにしたら解決して少し早くなったような気がします。\r\n\r\nGIFがおかしくなる[問題](https://misskey.io/notes/9ycexc1k071y0gdb)は結局GIFはそのまま返すようにして無理矢理解決しました。\r\n\r\n### media-proxy-go\r\n~~多すぎて覚えてない~~ 横長の画像をリサイズすると押し潰される\r\n## 作ってみた感想\r\n* summaly-pyは使ったことのないXPathを書いていて少しだけ大変だった\r\n* media-proxyは最初は大きいメディアを処理できなかったり問題が多かった (改善済み)\r\n  * GIFは未だにバグるので処理できない\r\n* media-proxy-goはWindowsでは使えない\r\n\r\n~~ゴミみたいな感想ですね~~\r\n## 最後に\r\n~~記事を書いてたら足の力がだんだん入らなくなってきました。助けてください~~\r\n\r\n記事を書くのって大変ですね\r\n## Repos\r\n#### media-proxy\r\n\u003CGitHub repo=\"AmaseCocoa/media-proxy\" />\r\n\r\n#### media-proxy-go\r\n\u003CGitHub repo=\"AmaseCocoa/media-proxy-go\" />\r\n\r\n#### summaly-py\r\n\u003CGitHub repo=\"AmaseCocoa/summaly-py\" />","src/content/blog/ja/misskey-calendar-2024.mdx","574cd85d5bbc6796","ja/misskey-calendar-2024.mdx","ja/post-1",{"id":113,"data":115,"body":126,"filePath":127,"digest":128,"legacyId":129,"deferredRender":20},{"createdAt":116,"updatedAt":117,"title":118,"description":119,"thumbnail":120,"tags":121,"license":125,"noAi":20},["Date","2022-07-01T00:00:00.000Z"],["Date","2025-07-01T00:00:00.000Z"],"私の最初のブログ記事","これは私の新しいAstroブログの最初の記事です。","https://docs.astro.build/assets/full-logo-light.png",[122,123,124],"astro","ブログ","公開学習","CC0","import Link from '../../../shortcodes/Link.astro'\r\nimport Misskey from '../../../shortcodes/Misskey.astro'\r\n\r\nAstroの学習についての私の _新しいブログ_ へようこそ！ここでは、新しいウェブサイトを作りながら、私の学習過程を共有します。\r\n\r\n## 達成したこと\r\n\r\n1. **Astroのインストール**: まず、新しいAstroプロジェクトを作成し、オンラインアカウントを設定しました。\r\n\r\n2. **ページの作成**: 次に、新しい`.astro`ファイルを作成し、それを`src/pages/`フォルダに配置することで、ページを作成する方法を学びました。\r\n\r\n3. **ブログ記事の作成**: これが私の最初のブログ記事です！AstroページとMarkdownの記事があります！\r\n\r\n## 次の目標\r\n\r\nAstroチュートリアルを終え、さらに記事を追加していきます。これからもこの場所をご覧ください。\r\n\r\n### test\r\n\r\n```js title=\"example.js\"\r\n// JavaScriptコードの例\r\nvar fun = function lang(l) {\r\n  dateformat.i18n = require('./lang/' + l);\r\n  return true;\r\n};\r\n```\r\n\r\n\r\n\u003CLink url=\"https://google.com\" />\r\n\r\n\u003CLink url=\"https://github.com/withastro/astro\" />\r\n\r\n\u003CLink url=\"https://www.youtube.com/shorts/gS6ZrBhvHjo\" allowPlayer={true} />\r\n\u003CLink url=\"https://www.youtube.com/shorts/gS6ZrBhvHjo\" allowPlayer={false} />\r\n\r\n\u003CMisskey host=\"i.amase.cc\" id=\"ade19u1qttzn00jp\" />","src/content/blog/ja/post-1.mdx","bfd53b478085b3d5","ja/post-1.mdx","ja/try-decap",{"id":130,"data":132,"body":139,"filePath":140,"digest":141,"legacyId":142,"deferredRender":20},{"createdAt":133,"title":134,"description":16,"tags":135,"license":19,"noAi":20},["Date","2024-09-13T00:00:00.000Z"],"Decap CMSを使ってみる",[136,137,138],"decap-cms","hugo","git","自作CMSをやめてDecap CMSを使ってみた。\r\n\r\n## 他の案\r\n\r\n### Wordpress (ヘッドレス)\r\n\r\nへッドレスCMSとしてWordpressを使う案。実際、実装は完成していた。でも微妙だったのでやめた。\r\n\r\n### microCMS\r\n\r\n日本製のヘッドレスCMS。転送量の制限が気になるので結局やめた。\r\n\r\n### Decap CMS\r\n\r\n旧Netlify CMS。Gitを使える。Netlifyとの連携が強い (Cloudflare Pagesとかでも動かせなくはない)。**Gitを使える** (ここ大事)\r\n\r\n## なんで選んだの\r\n\r\n* データベースが不要 (Wordpressを使う場合はこれが課題だった)\r\n* 無料 (お金がないんです😇)\r\n\r\n### それ以外に使った技術\r\n\r\n* Pagefind (検索用。ホームとかにある検索ボックスがそれ)\r\n* Hugo (ビルド時間が短くなりそうっていう勝手な妄想から。あとは使ったことがあるから)\r\n\r\n#### UI\r\n\r\n* TailwindCSS\r\n* PhotoSwipe\r\n* Barba.js v2 + GSAP (非同期転移。読み込みのときに一度真っ白になるのが気になるので…)\r\n\r\nテーマは自作しました。\r\n\r\n## 構築してみる\r\n\r\n以下のコマンドを実行してhugoのサイトを作成する。テーマは[hugo-theme-stack](https://github.com/CaiJimmy/hugo-theme-stack)を使う。\r\n\r\n```\r\nhugo new site decap-site\r\n\r\ncd decap-site/themes\r\ngit clone https://github.com/CaiJimmy/hugo-theme-stack.git\r\ncd ..\r\n```\r\n\r\n完了したら`hugo.toml`を開いて以下の項目を追加する。\r\n\r\n```toml title=\"hugo.toml\"\r\ntheme = 'hugo-theme-stack'\r\n```\r\n\r\n次に`hugo serve`を実行して正常に起動したら完了。\r\n\r\n### Decap CMSを導入する\r\n\r\n導入は意外と簡単にできた。\r\nまずはstaticディレクトリに移動する。\r\n\r\n```\r\ncd static\r\n```\r\n\r\n次にstaticディレクトリにadminディレクトリを作成してadminディレクトリに移動。\r\n\r\n```\r\nmkdir admin\r\ncd admin\r\n```\r\n\r\nconfig.ymlを作成して以下をペーストする。 \r\n\r\n※このブログで使っているものです\r\n\r\n```yaml title=\"config.yml\"\r\nlocale: \"ja\"\r\nlocal_backend: true\r\n\r\nbackend:\r\n  name: git-gateway\r\n  branch: main\r\n\r\ncollections:\r\n  - name: \"post\"\r\n    label: \"Post\"\r\n    folder: \"content/posts\"\r\n    create: true\r\n    slug: \"{{fields.filename}}\"\r\n    preview_path: \"articles/{{slug}}\"\r\n    type: \"post\"\r\n    fields:\r\n      - { label: \"Title\", name: \"title\", widget: \"string\" }\r\n      - {label: \"Type\", name: \"type\", widget: \"hidden\", default: \"post\", hint: \"ファイルの種類 (通常は変更する必要はありません)\"}\r\n      - {\r\n          label: \"File Name\",\r\n          name: \"filename\",\r\n          widget: \"datetime\",\r\n          date_format: \"YYYY-MM-DD\",\r\n          time_format: false,\r\n          format: \"YYYY-MM-DD\",\r\n          hint: \"作成されるファイル名と記事のURLで使用されます。新規作成時のみ有効な設定です。\",\r\n        }\r\n      - {\r\n          label: \"Publish Date\",\r\n          name: \"date\",\r\n          widget: \"datetime\",\r\n          date_format: \"YYYY-MM-DD\",\r\n          time_format: \"HH:mm:ss+09:00\",\r\n          format: \"YYYY-MM-DDTHH:mm:ss+09:00\",\r\n          hint: \"公開日の設定です。未来の時刻では公開されません。\",\r\n        }\r\n      - {\r\n          label: \"Draft\",\r\n          name: \"draft\",\r\n          widget: \"boolean\",\r\n          default: true,\r\n          hint: \"下書きとして保存するかどうかを設定します。\",\r\n        }\r\n      - {\r\n          label: \"Tags\",\r\n          name: \"tags\",\r\n          widget: \"list\",\r\n          hint: \"タグはカンマ区切りで指定します。\",\r\n        }\r\n      - {label: \"Category\", name: \"category\", widget: \"list\", hint: \"カテゴリーはカンマ区切りで指定します。\",}\r\n      - {label: \"Author\", name: \"author\", widget: \"relation\", collection: \"authors\", searchFields: [\"name\"], valueField: \"name\"}\r\n      - { label: \"Body\", name: \"body\", widget: \"markdown\" }\r\n  - name: \"authors\"\r\n    label: \"Authors\"\r\n    folder: \"content/authors\"\r\n    create: true\r\n    slug: \"{{fields.slug}}\"\r\n    fields:\r\n      - {label: \"Slug\", name: \"slug\", widget: \"string\", hint: \"英字である必要があります。\"}\r\n      - {label: \"Name\", name: \"name\", widget: \"string\"}\r\n      - {label: \"Bio\", name: \"bio\", widget: \"text\"}\r\n      - {label: \"Avatar\", name: \"avatar\", widget: \"string\"}\r\n      - label: \"Links\"\r\n        name: \"links\"\r\n        widget: \"list\"\r\n        fields:\r\n          - {label: \"URL\", name: \"url\", widget: \"string\"}\r\n          - {label: \"Icon\", name: \"icon\", widget: \"string\"}\r\n      - {label: \"Content\", name: \"body\", widget: \"markdown\"}\r\n\r\nmedia_folder: \"static/uploads\"\r\npublic_folder: \"/uploads\"\r\n```\r\n\r\n次にindex.htmlを作成して以下のコードをペーストする\r\n\r\n```html title=\"index.html\"\r\n\u003C!DOCTYPE html>\r\n\u003Chtml>\r\n    \u003Chead>\r\n        \u003Cmeta charset=\"utf-8\" />\r\n        \u003Cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n        \u003Cmeta name=\"robots\" content=\"noindex\" />\r\n        \u003Ctitle>Content Manager\u003C/title>\r\n        \u003Cscript src=\"https://identity.netlify.com/v1/netlify-identity-widget.js\">\u003C/script>\r\n    \u003C/head>\r\n    \u003Cbody>\r\n        \u003Cscript src=\"https://unpkg.com/decap-cms@^3.0.0/dist/decap-cms.js\">\u003C/script>\r\n    \u003C/body>\r\n\u003C/html>\r\n```\r\n\r\n`hugo serve`でサーバーを起動したら`サーバーのアドレス/admin`にアクセスして画像の画面が表示されるか確認する。表示されたらNetlifyの設定をする。\r\n\r\n\r\n### Netlifyの設定\r\n\r\nここからはこのブログの管理画面を使います (?)\r\n\r\nNetlifyのプロジェクトの作成に関しては割愛します。\r\n\r\nサイドバーの「Integrations」をクリックし、出てきたページの「Identity」をクリックします。すると、右に「Netlify Identity」というのがあるのでそれの下にある「Enable」をクリックしてIdentityを有効化します。\r\n\r\n次に「Site configuration」に戻って、下にスクロールしたところにあるIdentityをクリックします。すると画像のような画面が表示されるので、「Registration preferences」を「Open」から「Invite only」に変更します。\r\n\r\n\r\n次にintegrationsからidentityの部分に戻ります。Netlify Identityの下にあるviewをクリックして転移した画面で表示される、「Invite users」をクリックします。表示されたモーダルに自分のメールアドレスを入力したあと、sendをクリックします。\r\n\r\nすると画像のようなメールが送信されているはずなので、それの**リンクをコピー**します。\r\n\r\n※このままクリックしても管理画面ではない場合は登録されないため\r\n\r\n\\`#を除いたリンク/admin/#以降の文字列\\`のように置き換えてアクセスしてください。\r\n\r\nするとおそらく管理画面が表示されます。\r\n\r\n次にNetlifyのGit-Gatewayを有効化します。\r\n\r\nまず、Site configurationのIdentityに戻ります。下の方にスクロールして「Git Gateway」の項目を見つけたら、「Enable Git Gateway」をクリックしてGit Gatewayを有効化します。これで導入は終わりです。\r\n\r\n## 感想\r\n\r\n簡単にできた。\r\n\r\n今度Netlify以外での方法も書くかもしれません。\r\n### あとがき\r\nこれ投稿してからPhotoSwipeのCSSを同梱してないことに気づいた。","src/content/blog/ja/try-decap.mdx","1d6b7b1426ceccc1","ja/try-decap.mdx","ja/why-dont-recommend-implement-activitypub",{"id":143,"data":145,"body":21,"filePath":149,"digest":150,"legacyId":151,"deferredRender":20},{"createdAt":146,"title":147,"description":16,"tags":148,"license":19,"noAi":20},["Date","2025-11-01T00:00:00.000Z"],"ActivityPub実装の開発はおすすめしない",[18],"src/content/blog/ja/why-dont-recommend-implement-activitypub.mdx","f901be077b8819b9","ja/why-dont-recommend-implement-activitypub.mdx"]